{"version":3,"sources":["features/todoSlice.js","components/Input.js","components/TodoItem.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todoList","reducers","saveTodo","state","action","push","payload","setCheck","map","item","id","done","actions","selectTodoList","todos","Input","useState","input","setInput","dispatch","useDispatch","className","type","value","onChange","e","target","onClick","console","log","Date","now","TodoItem","Checkbox","checked","color","inputProps","App","useSelector","store","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAMMA,EAAYC,YAAY,CAC1BC,KAAM,QACNC,aANiB,CACrBC,SAAS,IAMLC,SAAU,CACVC,SAAU,SAACC,EAAOC,GACdD,EAAMH,SAASK,KAAKD,EAAOE,UAE/BC,SAAU,SAACJ,EAAOC,GACdD,EAAMH,SAASQ,KAAI,SAAAC,GACZL,EAAOE,UAAYG,EAAKC,MACN,IAAdD,EAAKE,KACJF,EAAKE,MAAO,EAEZF,EAAKE,MAAO,UAQzB,EAEHf,EAAUgB,QADVV,EADG,EACHA,SAASK,EADN,EACMA,SAEAM,EAAiB,SAAAV,GAAK,OAAIA,EAAMW,MAAMd,UACpCJ,IAAf,Q,OCJemB,EAtBD,WAEV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,cAWjB,OACI,sBAAKC,UAAU,QAAf,UACI,uBAAOC,KAAK,OAAOC,MAAON,EAAOO,SAAU,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOH,UAClE,wBAAQI,QAZA,WACZC,QAAQC,IAAR,iBAAsBZ,IACtBE,EAASjB,EAAS,CACdO,KAAMQ,EACNN,MAAM,EACND,GAAIoB,KAAKC,UAOT,sB,gBCIGC,EApBE,SAAC,GAAsB,IAArBlC,EAAoB,EAApBA,KAAMa,EAAc,EAAdA,KAAMD,EAAQ,EAARA,GACpBS,EAAWC,cAKlB,OACI,sBAAKC,UAAU,WAAf,UACI,cAACY,EAAA,EAAD,CACAC,QAASvB,EACTwB,MAAM,UACNX,SATU,WACdL,EAASZ,EAASG,KASd0B,WAAY,CAAC,aAAc,wBAG3B,mBAAGf,UAAWV,GAAQ,iBAAtB,SAAyCb,QCUtCuC,MAvBf,WAEE,IAAMrC,EAAWsC,YAAYzB,GAE7B,OACE,qBAAKQ,UAAU,MAAf,SACA,sBAAKA,UAAU,iBAAf,UACA,qBAAKA,UAAU,qBAAf,SAEFrB,EAASQ,KAAI,SAAAC,GAAI,OACnB,cAAC,EAAD,CAAUX,KAAMW,EAAKA,KACnBE,KAAMF,EAAKE,KACXD,GAAID,EAAKC,UAKP,cAAC,EAAD,UCtBS6B,EAAQC,YAAe,CAClCC,QAAS,CACP3B,MAAM4B,KCOUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.e1b9f37c.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\ntodoList:[]\r\n}\r\n\r\nconst todoSlice = createSlice({\r\n    name: \"todos\",\r\n    initialState,\r\n    reducers: {\r\n    saveTodo: (state, action) => {\r\n        state.todoList.push(action.payload)\r\n    },\r\n    setCheck: (state, action) => {\r\n        state.todoList.map(item => {\r\n            if(action.payload === item.id) {\r\n                if(item.done === true) {\r\n                    item.done = false \r\n                }else{\r\n                    item.done = true\r\n                }\r\n            }\r\n        })\r\n    }\r\n    }\r\n});\r\n\r\nexport const {\r\n    saveTodo,setCheck\r\n} = todoSlice.actions\r\nexport const selectTodoList = state => state.todos.todoList\r\nexport default todoSlice.reducer","import React, { useState } from 'react'\r\nimport \"./Input.css\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {saveTodo} from \"../features/todoSlice\"\r\n\r\nconst Input = () => {\r\n\r\n    const [input, setInput] = useState(\"\");\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodo = () => {\r\n        console.log(`Adding ${input}`)\r\n        dispatch(saveTodo({\r\n            item: input,\r\n            done: false,\r\n            id: Date.now()\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div className=\"input\">\r\n            <input type=\"text\" value={input} onChange={e => setInput(e.target.value)}></input>\r\n            <button onClick={addTodo}>Add!</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport \"./TodoItem.css\"\r\nimport Checkbox from \"@material-ui/core/Checkbox\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setCheck} from \"../features/todoSlice\"\r\n\r\nconst TodoItem = ({name, done, id}) => {\r\n     const dispatch = useDispatch()\r\n    const handleCheck=()=>{\r\n        dispatch(setCheck(id))\r\n\r\n    }\r\n    return (\r\n        <div className=\"todoItem\">\r\n            <Checkbox\r\n            checked={done}\r\n            color=\"primary\"\r\n            onChange={handleCheck}\r\n            inputProps={{'aria-label': 'secondary checkbox'}}\r\n            />\r\n            {/* name */}\r\n            <p className={done && 'todoItem--done'}>{name}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem\r\n ","import React from 'react';\nimport './App.css';\nimport Input from \"./components/Input.js\";\nimport TodoItem from './components/TodoItem';\nimport {useSelector} from \"react-redux\";\nimport {selectTodoList} from \"./features/todoSlice\";\n\n\nfunction App() {\n\n  const todoList = useSelector(selectTodoList)\n\n  return (\n    <div className=\"app\">\n    <div className=\"app__container\">\n    <div className=\"app__todoContainer\">\n{\n  todoList.map(item => (\n<TodoItem name={item.item}\n  done={item.done}\n  id={item.id}\n/>\n  ))\n}\n    </div>\n    <Input></Input>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from \"../features/todoSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    todos:todoReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}